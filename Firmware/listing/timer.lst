C51 COMPILER V7.50   TIMER                                                                 04/04/2016 21:01:16 PAGE 1   


C51 COMPILER V7.50, COMPILATION OF MODULE TIMER
OBJECT MODULE PLACED IN .\output\timer.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE source\timer.c LARGE BROWSE INCDIR(.\include\) DEBUG OBJECTEXTEND PRINT(.\l
                    -isting\timer.lst) OBJECT(.\output\timer.obj)

line level    source

   1          #include <timer.h>
   2          #include <reg52.h>
   3          #include <intrins.h>
   4          #include <parameter.h>
   5          #include <key.h>
   6          
   7          #define TIMER_INIT 100
   8          
   9          
  10          /* define SFR */
  11          sfr AUXR = 0x8e;                    //Auxiliary register
  12          
  13          unsigned int code timerStep[259] = {  0,  153,  771,  1104,  1379,  1589,  1736,  1824,  1862,  1862,  183
             -0,  1777,  1710,
  14            1635,  1555,  1473,  1393,  1314,  1239,  1168,  1101,  1037,  979,  923,  871,
  15            824,  780,  738,  699,  664,  630,  599,  570,  543,  518,  494,  472,  452,  432,
  16            413,  397,  380,  365,  351,  337,  324,  313,  300,  291,  279,  270,  261,  252,
  17            244,  236,  228,  221,  214,  207,  201,  195,  190,  184,  178,  174,  168,  164,
  18            160,  155,
  19            160,  155,  152,  147,  143,  140,  136,  133,  129,  127,  123,  120,  118,  114,
  20            113,  109,  107,  105,  102,  100,  98,  95,  94,  92,  89,  88,  86,  84,  83,
  21            81,  79,  77,  77,  74,  73,  72,  70,  69,  68,  66,  65,  64,  63,  62,  60,  60,
  22            58,  57,  56,  56,  54,  53,  52,  52,  50,  50,  49,  48,  47,  46,  46,  45,  44,
  23            43,  43,  41,  42,  40,  40,  39,  39,  37,  38,  36,  36,  36,  35,  34,  34,  33,
  24            33,  32,  31,  32,  30,  30,  30,  29,  29,  28,  28,  27,  27,  26,  26,  26,  25,
  25            25,  24,  24,  23,  23,  23,  23,  22,  21,  21,  21,  21,  20,  20,  19,  20,  18,
  26            19,  18,  18,  18,  17,  17,  16,  17,  16,  15,  16,  15,  15,  14,  14,  14,  14,
  27            14,  13,  13,  12,  12,  13,  11,  12,  11,  11,  11,  11,  10,  10,  10,  9,  10,
  28            9,  8,  9,  8,  8,  8,  8,  7,  8,  6,  7,  7,  6,  6,  6,  5,  6,  5,  5,  5,  4,
  29            5,  4,  3,  4,  4,  3,  3,  3,  2,  2,  3,  2,  1,  2,  1,  1,  1,  1,  0,  0,  1};
  30          
  31          //-----------------------------------------------
  32          
  33          /* Timer0 interrupt routine */
  34          void tm0_isr() interrupt 1 using 1
  35          {
  36   1              static unsigned int timerInit;
  37   1              unsigned long stepRemain = motor1.stepPWMs -  motor1.stepPassPWMs;
  38   1              if(motor1.stepPassPWMs < 259)
  39   1              {
  40   2                      timerInit += timerStep[motor1.stepPassPWMs];
  41   2              }
  42   1              if(stepRemain < 259)
  43   1              {
  44   2                      timerInit -= timerStep[stepRemain];
  45   2              }
  46   1              motor1.stepPassPWMs++;
  47   1              if(motor1.stepPassPWMs == motor1.stepPWMs)
  48   1              {
  49   2                  TR0 = 0;
  50   2                      timerInit = TIMER_INIT;
  51   2              }
  52   1              TL0 = timerInit;                //设置定时初值
  53   1              TH0 = timerInit>>8;             //设置定时初值
C51 COMPILER V7.50   TIMER                                                                 04/04/2016 21:01:16 PAGE 2   

  54   1              ioMmotor1PWM = !ioMmotor1PWM;
  55   1      }
  56          
  57          /* Timer1 interrupt routine */
  58          void tm1_isr() interrupt 3 using 1
  59          {
  60   1              static unsigned int timerInit;
  61   1              unsigned long stepRemain = motor2.stepPWMs -  motor2.stepPassPWMs;
  62   1              if(motor2.stepPassPWMs < 259)
  63   1              {
  64   2                      timerInit += timerStep[motor2.stepPassPWMs];
  65   2              }
  66   1              if(stepRemain < 259)
  67   1              {
  68   2                      timerInit -= timerStep[stepRemain];
  69   2              }
  70   1              motor2.stepPassPWMs++;
  71   1              if(motor2.stepPassPWMs == motor2.stepPWMs)
  72   1              {
  73   2                  TR1 = 0;
  74   2                      timerInit = TIMER_INIT;
  75   2              }
  76   1              TL1 = timerInit;                //设置定时初值
  77   1              TH1 = timerInit>>8;             //设置定时初值
  78   1              ioMmotor2PWM = !ioMmotor2PWM;
  79   1      }
  80          
  81          //-----------------------------------------------
  82          
  83          
  84          void Timer0Init(void)           
  85          {
  86   1              AUXR |= 0x80;           //定时器时钟1T模式
  87   1              TMOD &= 0xF0;           //设置定时器模式
  88   1              TL0 = TIMER_INIT;               //设置定时初值
  89   1              TH0 = TIMER_INIT>>8;            //设置定时初值
  90   1              TF0 = 0;                //清除TF0标志
  91   1              TR0 = 0;                //定时器0开始计时
  92   1              ET0 = 1;                        //enable timer0 interrupt
  93   1              EA = 1;                         //open global interrupt switch
  94   1      }
  95          
  96          void Motor1Start(void)          
  97          {
  98   1              TR0 = 1;                       
  99   1      }
 100          
 101          void Timer1Init(void)           
 102          {
 103   1              AUXR |= 0x40;           //定时器时钟1T模式
 104   1              TMOD &= 0x10;           //设置定时器模式
 105   1              TL1 = TIMER_INIT;               //设置定时初值
 106   1              TH1 = TIMER_INIT>>8;            //设置定时初值
 107   1              TF1 = 0;                //清除TF0标志
 108   1              TR1 = 0;                //定时器0开始计时
 109   1              ET1 = 1;                        //enable timer1 interrupt
 110   1              EA = 1;                         //open global interrupt switch
 111   1      }
 112          
 113          void Motor2Start(void)          
 114          {
 115   1              TR1 = 1;                       
C51 COMPILER V7.50   TIMER                                                                 04/04/2016 21:01:16 PAGE 3   

 116   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    646    ----
   CONSTANT SIZE    =    518    ----
   XDATA SIZE       =      4       8
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
